# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CoffeeShop.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from Invoice import Ui_Invoice
import ctypes

MB_OK = 0x0
MB_OKCXL = 0x01
MB_YESNOCXL = 0x03
MB_YESNO = 0x04
MB_HELP = 0x4000
ICON_EXLAIM = 0x30
ICON_INFO = 0x40
ICON_STOP = 0x10
import pymongo
import re
from PyQt5.QtWidgets import QTableWidgetItem
from library.lib_query_order import addOrder, getOrder, deleteOrder,updateQtyPro,calPrice,insertinvoice

Myserver = 'mongodb+srv://Chayapol:aum0825904216@cluster0.xjaok.mongodb.net/<dbname>?retryWrites=true&w=majority'


class Ui_Coffee_Shop(object):

    def toHome(self):
        self.thiswindow.close()
        self.prewindow.show()

    def toInvoice(self):
        if len(getOrder()) == 0:
            ctypes.windll.user32.MessageBoxW(0, "Please select item to buy!!", "Warning", ICON_EXLAIM | MB_OK)
        else:
            self.updateStock()
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_Invoice()
            self.ui.setupUi(self.window, self.prewindow, self.thiswindow)
            self.thiswindow.close()
            self.window.show()

    def display(self, condition):
        with pymongo.MongoClient(Myserver) as conn:
            db = conn.get_database('Coffee_shop')
            where = condition
            read = db.Product.find(where)
            cursor = db.Product.find(where)
            # count = db.Product.count_documents(where)
            rowcount = 0
            for i in read:
                for j in range(len(i['products'])):
                    rowcount += 1

            ## Table Widget
            self.tb_Showproduct.setRowCount(rowcount)
            self.tb_Showproduct.setColumnCount(8)

            header = self.tb_Showproduct.horizontalHeader()
            header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
            header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
            header.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)
            header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)
            header.setSectionResizeMode(5, QtWidgets.QHeaderView.ResizeToContents)
            header.setSectionResizeMode(6, QtWidgets.QHeaderView.ResizeToContents)
            header.setSectionResizeMode(7, QtWidgets.QHeaderView.ResizeToContents)

            header1 = QtWidgets.QTableWidgetItem("Id")
            header2 = QtWidgets.QTableWidgetItem("Name")
            header3 = QtWidgets.QTableWidgetItem("Size")
            header4 = QtWidgets.QTableWidgetItem("Price")
            header5 = QtWidgets.QTableWidgetItem("Stock")
            header6 = QtWidgets.QTableWidgetItem("Type")
            header7 = QtWidgets.QTableWidgetItem("Blend")
            header8 = QtWidgets.QTableWidgetItem("Roasting")

            self.tb_Showproduct.setHorizontalHeaderItem(0, header1)
            self.tb_Showproduct.setHorizontalHeaderItem(1, header2)
            self.tb_Showproduct.setHorizontalHeaderItem(2, header3)
            self.tb_Showproduct.setHorizontalHeaderItem(3, header4)
            self.tb_Showproduct.setHorizontalHeaderItem(4, header5)
            self.tb_Showproduct.setHorizontalHeaderItem(5, header6)
            self.tb_Showproduct.setHorizontalHeaderItem(6, header7)
            self.tb_Showproduct.setHorizontalHeaderItem(7, header8)

            row = 0
            for i in cursor:
                for j in range(len(i['products'])):
                    self.tb_Showproduct.setItem(row, 0, QTableWidgetItem('{}'.format(i['id'])))
                    self.tb_Showproduct.setItem(row, 1, QTableWidgetItem('{}'.format(i['name'])))
                    self.tb_Showproduct.setItem(row, 2, QTableWidgetItem('{}'.format(i['products'][j]['size'])))
                    self.tb_Showproduct.setItem(row, 3, QTableWidgetItem('{}'.format(i['products'][j]['price'])))
                    self.tb_Showproduct.setItem(row, 4, QTableWidgetItem('{}'.format(i['products'][j]['qty'])))
                    self.tb_Showproduct.setItem(row, 5, QTableWidgetItem('{}'.format(i['type'])))
                    self.tb_Showproduct.setItem(row, 6, QTableWidgetItem('{}'.format(i['blend'])))
                    self.tb_Showproduct.setItem(row, 7, QTableWidgetItem('{}'.format(i['roastinglvl'])))
                    row += 1

            headerOr = self.tb_Showorder.horizontalHeader()
            headerOr.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
            headerOr.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
            headerOr.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)
            headerOr.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)
            headerOr.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)

            headerOr1 = QtWidgets.QTableWidgetItem("Name")
            headerOr2 = QtWidgets.QTableWidgetItem("Size")
            headerOr3 = QtWidgets.QTableWidgetItem("Price")
            headerOr4 = QtWidgets.QTableWidgetItem("Amount")
            headerOr5 = QtWidgets.QTableWidgetItem("Type")

            self.tb_Showorder.setHorizontalHeaderItem(0, headerOr1)
            self.tb_Showorder.setHorizontalHeaderItem(1, headerOr2)
            self.tb_Showorder.setHorizontalHeaderItem(2, headerOr3)
            self.tb_Showorder.setHorizontalHeaderItem(3, headerOr4)
            self.tb_Showorder.setHorizontalHeaderItem(4, headerOr5)

    def clear(self):
        self.sb_qty.setValue(0)
        self.tb_Showorder.clear()
        self.tb_Showproduct.clear()

    def checkonlynum(self,txt):
        check = re.search("^[0-9]*$", txt)
        if (check):
            return True
        else:
            return False

    def setCondition(self):
        inputt = self.txt_Search.toPlainText()
        colselect = self.cbo_Doc_Search.currentText()
        if colselect == "Name":
            mycondi = {"name": {"$regex": inputt}}
            self.display(mycondi)
        elif colselect == "Size":
            mycondi = {"products.size": {"$regex": inputt}}
            self.display(mycondi)
        elif colselect == "Price >=":
            if self.checkonlynum(inputt):
                mycondi = {"products.price": {"$gte": int(inputt)}}
                self.display(mycondi)
            else:
                ctypes.windll.user32.MessageBoxW(0, "Please enter number only!!", "Warning", ICON_EXLAIM | MB_OK)
        elif colselect == "Price <=":
            if self.checkonlynum(inputt):
                mycondi = {"products.price": {"$lte": int(inputt)}}
                self.display(mycondi)
            else:
                ctypes.windll.user32.MessageBoxW(0, "Please enter number only!!", "Warning", ICON_EXLAIM | MB_OK)
        elif colselect == "Stock >=":
            if self.checkonlynum(inputt):
                mycondi = {"products.qty": {"$gte": int(inputt)}}
                self.display(mycondi)
            else:
                ctypes.windll.user32.MessageBoxW(0, "Please enter number only!!", "Warning", ICON_EXLAIM | MB_OK)
        elif colselect == "Stock <=":
            if self.checkonlynum(inputt):
                mycondi = {"products.qty": {"$lte": int(inputt)}}
                self.display(mycondi)
            else:
                ctypes.windll.user32.MessageBoxW(0, "Please enter number only!!", "Warning", ICON_EXLAIM | MB_OK)
        elif colselect == "Type":
            mycondi = {"type": {'$regex': inputt}}
            self.display(mycondi)
        elif colselect == "Blend":
            mycondi = {"blend": {'$regex': inputt}}
            self.display(mycondi)
        else:
            mycondi = {}
            self.display(mycondi)


    def toOrder(self):
        row = self.tb_Showproduct.currentRow()
        currselect = self.tb_Showproduct.item(row, 0)

        if str(currselect) == "None":
            ctypes.windll.user32.MessageBoxW(0, "Please select item!!", "Warning", ICON_EXLAIM | MB_OK)
        else:
            qtyleft = self.tb_Showproduct.item(row, 4).text()
            if int(qtyleft) == 0:
                ctypes.windll.user32.MessageBoxW(0, "Item out of stock!!", "Warning", ICON_EXLAIM | MB_OK)
            else:
                qty = self.sb_qty.value()
                if qty == 0:
                    ctypes.windll.user32.MessageBoxW(0, "Please select amount!!", "Warning", ICON_EXLAIM | MB_OK)
                elif qty > int(qtyleft):
                    ctypes.windll.user32.MessageBoxW(0, "Your amount is more than stock!!", "Warning", ICON_EXLAIM | MB_OK)
                else:
                    name = self.tb_Showproduct.item(row, 1).text()
                    size = self.tb_Showproduct.item(row, 2).text()
                    price = self.tb_Showproduct.item(row, 3).text()
                    typeo = self.tb_Showproduct.item(row, 5).text()
                    idp = self.tb_Showproduct.item(row, 0).text()
                    # print(name,size,price,typeo)
                    addOrder(name, size, price, typeo, qty, idp)
                    self.showDataOrder(getOrder())

    def toCancel(self):
        pointer = self.tb_Showorder.currentRow()
        if pointer == -1:
            ctypes.windll.user32.MessageBoxW(0, "Please select item to cancel!!", "Warning", ICON_EXLAIM | MB_OK)
        else:
            deleteOrder(pointer)
            self.showDataOrder(getOrder())

    def showDataOrder(self, inputOrder):
        self.tb_Showorder.setRowCount(0)
        countitem = 0
        for rowdata in inputOrder:
            self.tb_Showorder.insertRow(countitem)
            countcol = 0
            for data in rowdata.values():
                self.tb_Showorder.setItem(countitem, countcol, QtWidgets.QTableWidgetItem('{}'.format(data)))
                countcol += 1
            countitem += 1

    def updateStock(self):
        updateQtyPro()
        calPrice()
        insertinvoice()



    def setupUi(self, Coffee_Shop, Home):
        Coffee_Shop.setObjectName("Coffee_Shop")
        Coffee_Shop.resize(1006, 431)
        Coffee_Shop.setStyleSheet("background-color:#B99C8B;")
        self.txt_Search = QtWidgets.QTextEdit(Coffee_Shop)
        self.txt_Search.setGeometry(QtCore.QRect(280, 70, 201, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.txt_Search.setFont(font)
        self.txt_Search.setStyleSheet("background-color:white;")
        self.txt_Search.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.txt_Search.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.txt_Search.setObjectName("txt_Search")
        self.btn_Buy = QtWidgets.QPushButton(Coffee_Shop)
        self.btn_Buy.setGeometry(QtCore.QRect(520, 270, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.btn_Buy.setFont(font)
        self.btn_Buy.setStyleSheet("background-color:#755F55;\n"
                                   "color:white;")
        self.btn_Buy.setObjectName("btn_Buy")
        self.btn_Home = QtWidgets.QPushButton(Coffee_Shop)
        self.btn_Home.setGeometry(QtCore.QRect(520, 382, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.btn_Home.setFont(font)
        self.btn_Home.setStyleSheet("background-color:#755F55;\n"
                                    "color:white;")
        self.btn_Home.setObjectName("btn_Home")
        self.label = QtWidgets.QLabel(Coffee_Shop)
        self.label.setGeometry(QtCore.QRect(20, 20, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color:#755F55;\n"
                                 "border:1px;\n"
                                 "border-radius: 8px;\n"
                                 "color:white;")
        self.label.setObjectName("label")
        self.btn_Select = QtWidgets.QPushButton(Coffee_Shop)
        self.btn_Select.setGeometry(QtCore.QRect(520, 170, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.btn_Select.setFont(font)
        self.btn_Select.setStyleSheet("background-color:#755F55;\n"
                                      "color:white;")
        self.btn_Select.setObjectName("btn_Select")
        self.tb_Showproduct = QtWidgets.QTableWidget(Coffee_Shop)
        self.tb_Showproduct.setGeometry(QtCore.QRect(20, 110, 461, 301))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.tb_Showproduct.setFont(font)
        self.tb_Showproduct.setStyleSheet("background-color:white;")
        self.tb_Showproduct.setObjectName("tb_Showproduct")
        self.tb_Showproduct.setColumnCount(0)
        self.tb_Showproduct.setRowCount(0)
        self.tb_Showproduct.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tb_Showproduct.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.label_2 = QtWidgets.QLabel(Coffee_Shop)
        self.label_2.setGeometry(QtCore.QRect(20, 70, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color:#755F55;\n"
                                   "border:1px;\n"
                                   "border-radius: 8px;\n"
                                   "color:white;")
        self.label_2.setObjectName("label_2")

        self.tb_Showorder = QtWidgets.QTableWidget(Coffee_Shop)
        self.tb_Showorder.setGeometry(QtCore.QRect(650, 60, 331, 351))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.tb_Showorder.setFont(font)
        self.tb_Showorder.setStyleSheet("background-color:white;")
        self.tb_Showorder.setObjectName("tb_Showorder")
        self.tb_Showorder.setColumnCount(5)
        self.tb_Showorder.setRowCount(0)
        self.tb_Showorder.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tb_Showorder.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)


        self.label_3 = QtWidgets.QLabel(Coffee_Shop)
        self.label_3.setGeometry(QtCore.QRect(650, 20, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-color:#755F55;\n"
                                   "border:1px;\n"
                                   "border-radius: 8px;\n"
                                   "color:white;")
        self.label_3.setObjectName("label_3")

        self.label_4 = QtWidgets.QLabel(Coffee_Shop)
        self.label_4.setGeometry(QtCore.QRect(490, 70, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("background-color:#755F55;\n"
                                   "border:1px;\n"
                                   "border-radius: 8px;\n"
                                   "color:white;")
        self.label_4.setObjectName("label_4")

        self.sb_qty = QtWidgets.QSpinBox(Coffee_Shop)
        self.sb_qty.setGeometry(QtCore.QRect(520, 120, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.sb_qty.setFont(font)
        self.sb_qty.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.sb_qty.setMinimum(0)
        self.sb_qty.setSingleStep(1)
        self.sb_qty.setProperty("value", 0)
        self.sb_qty.setObjectName("sb_qty")

        self.btn_Search = QtWidgets.QPushButton(Coffee_Shop)
        self.btn_Search.setGeometry(QtCore.QRect(390, 30, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.btn_Search.setFont(font)
        self.btn_Search.setStyleSheet("background-color:#755F55;\n"
                                      "color:white;")
        self.btn_Search.setObjectName("btn_Search")

        # combobox
        self.cbo_Doc_Search = QtWidgets.QComboBox(Coffee_Shop)
        self.cbo_Doc_Search.setGeometry(QtCore.QRect(110, 70, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.cbo_Doc_Search.setFont(font)
        self.cbo_Doc_Search.setStyleSheet("background-color:white;")
        self.cbo_Doc_Search.setObjectName("cbo_Doc_Search")
        # set item
        self.cbo_Doc_Search.addItem("Select All")
        self.cbo_Doc_Search.addItem("Name")
        self.cbo_Doc_Search.addItem("Size")
        self.cbo_Doc_Search.addItem("Price >=")
        self.cbo_Doc_Search.addItem("Price <=")
        self.cbo_Doc_Search.addItem("Stock >=")
        self.cbo_Doc_Search.addItem("Stock <=")
        self.cbo_Doc_Search.addItem("Type")
        self.cbo_Doc_Search.addItem("Blend")

        self.btn_Cancel = QtWidgets.QPushButton(Coffee_Shop)
        self.btn_Cancel.setGeometry(QtCore.QRect(520, 220, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.btn_Cancel.setFont(font)
        self.btn_Cancel.setStyleSheet("background-color:#755F55;\n"
                                      "color:white;")
        self.btn_Cancel.setObjectName("btn_Cancel")

        self.clear()
        self.display({})

        # set page
        self.thiswindow = Coffee_Shop
        self.prewindow = Home

        # button event
        self.btn_Search.clicked.connect(self.setCondition)
        self.btn_Home.clicked.connect(self.toHome)
        self.btn_Buy.clicked.connect(self.toInvoice)
        self.btn_Select.clicked.connect(self.toOrder)
        self.btn_Cancel.clicked.connect(self.toCancel)

        self.retranslateUi(Coffee_Shop)
        QtCore.QMetaObject.connectSlotsByName(Coffee_Shop)

    def retranslateUi(self, Coffee_Shop):
        _translate = QtCore.QCoreApplication.translate
        Coffee_Shop.setWindowTitle(_translate("Coffee_Shop", "Coffee Shop"))
        self.btn_Buy.setText(_translate("Coffee_Shop", "Buy"))
        self.btn_Home.setText(_translate("Coffee_Shop", "Home"))
        self.label.setText(_translate("Coffee_Shop", " Welcome to Roast Coffee Shop"))
        self.btn_Select.setText(_translate("Coffee_Shop", "Select"))
        self.label_2.setText(_translate("Coffee_Shop", " Search By"))
        self.label_3.setText(_translate("Coffee_Shop", " Your order"))
        self.label_4.setText(_translate("Coffee_Shop", " Select your amount"))
        self.btn_Search.setText(_translate("Coffee_Shop", "Search"))
        self.btn_Cancel.setText(_translate("Coffee_Shop", "Cancel"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Coffee_Shop = QtWidgets.QDialog()
    ui = Ui_Coffee_Shop()
    ui.setupUi(Coffee_Shop)
    Coffee_Shop.show()
    sys.exit(app.exec_())
