# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Insert_Inproduct.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from library.lib_send_data import addDatatoList,editDatatoList
from library.lib_query_datatable import getcurrPro
import re
import ctypes
MB_OK = 0x0
MB_OKCXL = 0x01
MB_YESNOCXL = 0x03
MB_YESNO = 0x04
MB_HELP = 0x4000
ICON_EXLAIM = 0x30
ICON_INFO = 0x40
ICON_STOP = 0x10
class Ui_Insert_Inproduct(object):

    def checkonlynum(self,txt):
        check = re.search("^[0-9]*$", txt)

        if (check):
            return True
        else:
            return False

    def insertProducts(self):
        size = self.txt_size.text()
        price = self.txt_price.text()
        stock = self.txt_stock.text()
        pricecheck = self.checkonlynum(self.txt_price.text())
        stockcheck = self.checkonlynum(self.txt_stock.text())

        if size == "" and price == "" and stock == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter size,price and stock", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif size == ""  and stock == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter size and stock", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif price == "" and stock == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter price and stock", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif size == "" and price == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter size and price", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif size == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter size", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif price == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter price", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif stock == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter stock", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif pricecheck != True and stockcheck != True:
            ctypes.windll.user32.MessageBoxW(0, "Price & Stock must be number only!!", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif pricecheck != True:
            ctypes.windll.user32.MessageBoxW(0, "Price must be number only!!", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif stockcheck != True:
            ctypes.windll.user32.MessageBoxW(0, "Stock must be number only!!", "Warning",
                                             ICON_EXLAIM | MB_OK)
        else:
            data = []
            data.append(size)
            data.append(int(price))
            data.append(int(stock))
            addDatatoList(data)
            self.thiswindow.close()

    def editProduct(self):
        size = self.txt_size.text()
        price = self.txt_price.text()
        stock = self.txt_stock.text()
        pointer = getcurrPro()[3]
        print(pointer)
        pricecheck = self.checkonlynum(self.txt_price.text())
        stockcheck = self.checkonlynum(self.txt_stock.text())

        if size == "" and price == "" and stock == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter size,price and stock", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif size == ""  and stock == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter size and stock", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif price == "" and stock == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter price and stock", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif size == "" and price == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter size and price", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif size == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter size", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif price == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter price", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif stock == "":
            ctypes.windll.user32.MessageBoxW(0, "Please Enter stock", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif pricecheck != True and stockcheck != True:
            ctypes.windll.user32.MessageBoxW(0, "Price & Stock must be number only!!", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif pricecheck != True:
            ctypes.windll.user32.MessageBoxW(0, "Price must be number only!!", "Warning",
                                             ICON_EXLAIM | MB_OK)
        elif stockcheck != True:
            ctypes.windll.user32.MessageBoxW(0, "Stock must be number only!!", "Warning",
                                             ICON_EXLAIM | MB_OK)
        else:
            data = []
            data.append(size)
            data.append(int(price))
            data.append(int(stock))
            editDatatoList(data,pointer)
            self.thiswindow.close()

    def setupUi(self, Insert_Inproduct,status):
        Insert_Inproduct.setObjectName("Insert_Inproduct")
        Insert_Inproduct.resize(373, 264)
        Insert_Inproduct.setStyleSheet("background-color:#B99C8B;")
        self.label_2 = QtWidgets.QLabel(Insert_Inproduct)
        self.label_2.setGeometry(QtCore.QRect(40, 50, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color:#755F55;\n"
                                   "border:1px;\n"
                                   "border-radius: 8px;\n"
                                   "color:white;")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Insert_Inproduct)
        self.label_3.setGeometry(QtCore.QRect(40, 100, 51, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-color:#755F55;\n"
                                   "border:1px;\n"
                                   "border-radius: 8px;\n"
                                   "color:white;")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Insert_Inproduct)
        self.label_4.setGeometry(QtCore.QRect(40, 150, 51, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setStyleSheet("background-color:#755F55;\n"
                                   "border:1px;\n"
                                   "border-radius: 8px;\n"
                                   "color:white;")
        self.label_4.setObjectName("label_4")
        self.txt_size = QtWidgets.QLineEdit(Insert_Inproduct)
        self.txt_size.setGeometry(QtCore.QRect(120, 50, 211, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.txt_size.setFont(font)
        self.txt_size.setStyleSheet("background-color:white;")
        self.txt_size.setObjectName("txt_size")
        self.txt_price = QtWidgets.QLineEdit(Insert_Inproduct)
        self.txt_price.setGeometry(QtCore.QRect(120, 100, 211, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.txt_price.setFont(font)
        self.txt_price.setStyleSheet("background-color:white;")
        self.txt_price.setObjectName("txt_price")
        self.txt_stock = QtWidgets.QLineEdit(Insert_Inproduct)
        self.txt_stock.setGeometry(QtCore.QRect(120, 150, 211, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.txt_stock.setFont(font)
        self.txt_stock.setStyleSheet("background-color:white;")
        self.txt_stock.setObjectName("txt_stock")
        self.btn_Save = QtWidgets.QPushButton(Insert_Inproduct)
        self.btn_Save.setGeometry(QtCore.QRect(240, 200, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Kanit Light")
        font.setPointSize(12)
        self.btn_Save.setFont(font)
        self.btn_Save.setStyleSheet("background-color:#755F55;\n"
                                    "color:white;")
        self.btn_Save.setObjectName("btn_Save")

        # button click
        if status == "Edit":
            data = getcurrPro()
            # print(data)
            self.txt_size.setText(data[0])
            self.txt_price.setText(data[1])
            self.txt_stock.setText(data[2])
            self.btn_Save.clicked.connect(self.editProduct)
        else:
            self.btn_Save.clicked.connect(self.insertProducts)

        self.thiswindow = Insert_Inproduct

        self.retranslateUi(Insert_Inproduct)
        QtCore.QMetaObject.connectSlotsByName(Insert_Inproduct)

    def retranslateUi(self, Insert_Inproduct):
        _translate = QtCore.QCoreApplication.translate
        Insert_Inproduct.setWindowTitle(_translate("Insert_Inproduct", "Dialog"))
        self.label_2.setText(_translate("Insert_Inproduct", " Size"))
        self.label_3.setText(_translate("Insert_Inproduct", " Price"))
        self.label_4.setText(_translate("Insert_Inproduct", " Stock"))
        self.btn_Save.setText(_translate("Insert_Inproduct", "OK"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Insert_Inproduct = QtWidgets.QDialog()
    ui = Ui_Insert_Inproduct()
    ui.setupUi(Insert_Inproduct)
    Insert_Inproduct.show()
    sys.exit(app.exec_())
